// Generated by CoffeeScript 1.6.2
var AvatarsIO, crypto, fs, request;

request = require('request');

fs = require('fs');

crypto = require('crypto');

AvatarsIO = (function() {
  function AvatarsIO() {}

  AvatarsIO.appId = '';

  AvatarsIO.accessToken = '';

  AvatarsIO.host = 'http://avatars.io';

  AvatarsIO.upload = function(path, identifier, callback) {
    var _this = this;

    if ('function' === typeof identifier) {
      callback = identifier;
      identifier = '';
    }
    return fs.readFile(path, function(err, buffer) {
      return request({
        url: "" + _this.host + "/v1/token",
        method: 'POST',
        headers: {
          'x-client_id': _this.appId,
          'Authorization': "OAuth " + _this.accessToken,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          data: {
            filename: path,
            md5: crypto.createHash('md5').update(buffer).digest('hex'),
            size: buffer.length,
            path: identifier
          }
        })
      }, function(err, res, body) {
        body = JSON.parse(body);
        if (!body.data.upload_info) {
          return callback(false, body.data.url);
        }
        return request({
          url: body.data.upload_info.upload_url,
          method: 'PUT',
          headers: {
            'Authorization': body.data.upload_info.signature,
            'Date': body.data.upload_info.date,
            'Content-Type': body.data.upload_info.content_type,
            'x-amz-acl': 'public-read'
          },
          body: buffer
        }, function() {
          return request({
            url: "" + _this.host + "/v1/token/" + body.data.id + "/complete",
            method: 'POST',
            headers: {
              'x-client_id': _this.appId,
              'Authorization': "OAuth " + _this.accessToken,
              'Content-Type': 'application/json'
            },
            body: '{}'
          }, function(err, res, body) {
            return callback(false, JSON.parse(body).data.data);
          });
        });
      });
    });
  };

  AvatarsIO.avatarUrl = function(service, key) {
    return "" + this.host + "/" + service + "/" + key;
  };

  AvatarsIO.avatarURL = function() {
    return this.avatarUrl.apply(this, arguments);
  };

  AvatarsIO.avatar_url = function() {
    return this.avatarUrl.apply(this, arguments);
  };

  AvatarsIO.avatar = function() {
    return this.avatarUrl.apply(this, arguments);
  };

  AvatarsIO.autoUrl = function(key, services) {
    if (services == null) {
      services = [];
    }
    if (services.length === 0) {
      return "" + this.host + "/auto/" + key;
    } else {
      return "" + this.host + "/auto/" + key + "?services=" + (services.join(','));
    }
  };

  AvatarsIO.autoURL = function() {
    return this.autoUrl.apply(this, arguments);
  };

  AvatarsIO.auto_url = function() {
    return this.autoUrl.apply(this, arguments);
  };

  AvatarsIO.auto = function() {
    return this.autoUrl.apply(this, arguments);
  };

  return AvatarsIO;

})();

module.exports = AvatarsIO;
